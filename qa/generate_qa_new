import json
import os
import random
import sys
sys.path.append(os.path.dirname(os.path.dirname(__file__)))
from personas.persona import Persona

INPUT_FILE_NAME = "therapist_personas.json"
OUTPUT_FILE_NAME = "qa_pairs_therapist.json"

def get_persona_attributes():
    return [
        attr for attr in vars(Persona()).keys()
        if not callable(getattr(Persona(), attr)) and not attr.startswith("__")
    ]

def load_personas_from_file(file_path):
    with open(file_path, "r") as file:
        data = json.load(file)
    return data

def generate_qa(personas, persona_attributes):
    qa_list = []

    for persona in personas:
        story = persona.get("biography", "Biography not provided.")
        qa = []
        #print(persona)
        for i, attr in enumerate(persona_attributes):
            if attr == "biography":
                continue
            main_answer = persona.get(attr, "")
            if main_answer:
                other_options = [
                    other_persona.get(attr, "") for other_persona in personas
                    if other_persona != persona and other_persona.get(attr, "")
                ]
                random.shuffle(other_options)
                answer_a = other_options[0] 
                answer_b = other_options[1] 
                answer_c = other_options[2] 
                answer_d = other_options[3]
                choices = [answer_a, answer_b, answer_c, answer_d]
                correct_index = random.randint(0,3)
                choices[correct_index] = main_answer
                choices[0] = " A) " + choices[0]
                choices[1] = " B) " + choices[1]
                choices[2] = " C) " + choices[2]
                choices[3] = " D) " + choices[3]
                correct_choice = choices[correct_index]
                question_text = "Which of the following is a true statement about you?"
                for choice in choices:
                    question_text += choice
                qa.append([question_text, correct_choice, i])
            else:
                qa.append(["",""])
        qa_list.append({"story": story, "qa": qa})
    return qa_list


PERSONA_ATTRIBUTES = get_persona_attributes()
PARENT_DIR = os.path.dirname(os.path.dirname(__file__))
GENERIC_PERSONAS_PATH = os.path.join(PARENT_DIR, "personas", "data", INPUT_FILE_NAME)
personas = load_personas_from_file(GENERIC_PERSONAS_PATH)

# Generate QA sets
qa_output = generate_qa(personas, PERSONA_ATTRIBUTES)

output_path = os.path.join(PARENT_DIR, OUTPUT_FILE_NAME)
with open(output_path, "w") as output_file:
    json.dump(qa_output, output_file, indent=4)